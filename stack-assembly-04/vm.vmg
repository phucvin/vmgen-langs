\ comments start with "\ " (note that "\E" is not a comment)

\ stack definitions:
\E stack data-stack sp Cell

\ stack prefix definitions
\E inst-stream stack-prefix #

\ type prefix definitions:
\E s" long long" single data-stack type-prefix i
\E s" Inst *" single data-stack type-prefix target

push_l ( #i0 -- i1 )
i1 = i0;

add ( i0 i1 -- i2 )
i2 = i0 + i1;

add_ff ( #i0 #i1 -- i2 )
i2 = (fp-i0)->i + (fp-i1)->i;

sub ( i0 i1 -- i2 )
i2 = i0 - i1;

sub_fl ( #i0 #i1 -- i2 )
i2 = (fp-i0)->i - i1;

jump_l_if_f_lt_l ( #target0 #i0 #i1 -- )
if ((fp-i0)->i < i1) SET_IP(target0);

halt ( i0 -- )
return i0;

call1 ( #target0 i0 -- target1 i1 i2)
target1 = IP;
SET_IP(target0);
i1 = fp;
i2 = i0;
fp = sp;

ret ( i0 -- )
SET_IP((fp+2)->target);
sp = fp+2;
fp = (fp+1)->i;
sp[0].i = i0;

ret_f ( #i0 -- )
long long tmp = (fp-i0)->i;
SET_IP((fp+2)->target);
sp = fp+2;
fp = (fp+1)->i;
sp[0].i = tmp;

alloc ( #i0 -- )
if (fp == NULL) fp = sp;
sp -= i0;

store ( i0 #i1 -- )
(fp-i1)->i = i0;

load ( #i0 -- i1 )
i1 = (fp-i0)->i;

\ Super instructions below

s_load_push = load push_l
s_load_push_sub = load push_l sub