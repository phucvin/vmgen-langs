\ comments start with "\ " (note that "\E" is not a comment)

\ stack definitions:
\E stack data-stack sp Cell

\ stack prefix definitions
\E inst-stream stack-prefix #

\ type prefix definitions:
\E s" long" single data-stack type-prefix i
\E s" Inst *" single data-stack type-prefix target

push_l ( #i0 -- i1 )
i1 = i0;

push_r ( #i0 -- i1 )
i1 = regs[i0];

pop_r ( #i0 i1 -- )
regs[i0] = i1;

dup ( i0 -- i1 i2 )
i1 = i0;
i2 = i0;

swap ( i0 i1 -- i2 i3 )
i2 = i1;
i3 = i0;

add ( i0 i1 -- i2 )
i2 = i0 + i1;

add_rrl ( #i0 #i1 #i2 -- )
regs[i0] = regs[i1] + i2;

add_rrr ( #i0 #i1 #i2 -- )
regs[i0] = regs[i1] + regs[i2];

sub ( i0 i1 -- i2 )
i2 = i0 - i1;

sub_rrl ( #i0 #i1 #i2 -- )
regs[i0] = regs[i1] - i2;

sub_rlr ( #i0 #i1 #i2 -- )
regs[i0] = i1 - regs[i2];

sub_rrr ( #i0 #i1 #i2 -- )
regs[i0] = regs[i1] - regs[i2];

push_addr ( #target0 -- target1 )
target1 = target0;

push_relative_addr ( #i0 -- target1 )
target1 = (union Cell*)((char*)IP + i0);

jump ( target0 -- )
SET_IP(target0);

jump_l ( #target0 -- )
SET_IP(target0);

jump_l_if_lt ( #target0 i0 i1 -- )
if (i0 < i1) SET_IP(target0);

jump_l_if_r_lt_l ( #target0 #i0 #i1 -- )
if (regs[i0] < i1) SET_IP(target0);

jump_if_r_lt_l ( target0 #i0 #i1 -- )
if (regs[i0] < i1) SET_IP(target0);

set_rl ( #i0 #i1 -- )
regs[i0] = i1;

set_rr ( #i0 #i1 -- )
regs[i0] = regs[i1];

end ( i0 -- )
return i0;

\ Super instructions below

s_call0 = set_rl jump_l
s_call1_0 = set_rl set_rl
s_call1 = set_rl set_rl jump_l